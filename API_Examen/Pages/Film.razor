@page "/movies"
@using API_Examen.Models
@using System.Text.Json
@using Blazored.LocalStorage
@inject MovieService MovieService
@inject ILocalStorageService localStorage


<h3>Films en Tendance</h3>

@if (movies == null)
{
    <p>Chargement en cours...</p>
}
else if (movies.Count == 0)
{
    <p>Aucun film trouvé.</p>
}
else
{
    <div class="movies-container">  
        @foreach (var movie in movies)
        {
            <div class="movie-card">
                <img src="@($"https://image.tmdb.org/t/p/w500{movie.PosterPath}")" alt="@movie.Title" />
                <button class="fav-buttons" @onclick="() => ToggleFavorite(movie)">
                    <img src="@(IsFavorite(movie) ? "heart_red.png" : "heart_gray.png")" alt="Favoris" />
                </button>
                <h4>@movie.Title</h4>
                <p><span class="vote-average">@movie.GetFormattedVoteAverage()</span> - @movie.Release_Date</p>
                <p>@movie.Overview</p>
            </div>
        }
    </div>
}

@code {
    private List<Movie> movies;
    private List<Movie> favoriteMovies = new();

    protected override async Task OnInitializedAsync()
    {
        movies = await MovieService.GetTrendingMoviesAsync(10); // Charge les films tendances (10 pages) depuis l'API TMDB via le service `MovieService`.
        await LoadFavorites();
    }
    private bool IsFavorite(Movie movie)
    {
        return favoriteMovies.Any(m => m.Title == movie.Title); // Vérifie si un film est déjà présent dans la liste des favoris.
    }
    
    private void ToggleFavorite(Movie movie)
    {
        if (favoriteMovies.Any(m => m.Title == movie.Title))
        {
            favoriteMovies.RemoveAll(m => m.Title == movie.Title); // Si le film est déjà dans les favoris, il est supprimé.
        }
        else
        {
            movie.Status = "Neutre";
            favoriteMovies.Add(movie); // Sinon, il est ajouté à la liste des favoris avec un statut par défaut ("Neutre").
        }

        SaveFavorites();
    }

    private async Task LoadFavorites()
    {
        var json = await localStorage.GetItemAsStringAsync("favoriteMovies"); // Récupère les données des favoris sous forme de chaîne JSON depuis le stockage local.
        if (!string.IsNullOrEmpty(json))
        {
            favoriteMovies = JsonSerializer.Deserialize<List<Movie>>(json) ?? new List<Movie>(); // Désérialise les données JSON en une liste d'objets `Movie`.
        }
    }

    private async Task SaveFavorites()
    {
        var json = JsonSerializer.Serialize(favoriteMovies); // Sérialise la liste des films favoris en une chaîne JSON.
        await localStorage.SetItemAsStringAsync("favoriteMovies", json); // Enregistre cette chaîne JSON dans le stockage local sous la clé "favoriteMovies".
    }
}
